# This workflow will build and push a Docker container to an Azure Web App when a commit is pushed to your default branch.

# This workflow assumes you have already created the target Azure App Service web app.

name: Build and deploy a container to an Azure Web App

# Define environment variables used in the workflow.
env:
  AZURE_WEBAPP_NAME: testcgg  # Set this to the name of your Azure Web App
  DOCKERHUB_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/your-repo-name  # Set this to the Docker Hub repository where images will be pushed

# Define the events that trigger the workflow.
on:
  push:
    branches: [ "main" ]  # Trigger the workflow when code is pushed to the 'main' branch
  workflow_dispatch:  # Allow manually triggering the workflow from GitHub UI

# Define permissions required for the workflow.
permissions:
  contents: read  # Provide read access to repository contents

# Define the build job.
jobs:
  build:
    runs-on: ubuntu-latest  # Specify that the job should run on the latest Ubuntu runner

    steps:
      # Step 1: Checkout the repository code.
      - uses: actions/checkout@v4  # Checkout the latest version of your code from the repository

      # Step 2: Set up Docker Buildx.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3  # Set up Docker Buildx, which is required for building multi-platform Docker images and caching

      # Step 3: Log in to Docker Hub.
      - name: Log in to Docker Hub
        uses: docker/login-action@v3  # Use Docker's login action to authenticate with Docker Hub
        with:
          registry: docker.io  # Specify the Docker registry (Docker Hub)
          username: ${{ secrets.DOCKERHUB_USERNAME }}  # Use the Docker Hub username stored in GitHub secrets
          password: ${{ secrets.DOCKERHUB_PASSWORD }}  # Use the Docker Hub password stored in GitHub secrets

      # Step 4: Build and push Docker image to Docker Hub.
      - name: Build and push Docker image to Docker Hub
        uses: docker/build-push-action@v5  # Build and push Docker images using the Docker GitHub Action
        with:
          context: .  # Specify the directory containing the Dockerfile (root in this case)
          file: ./Dockerfile  # Path to the Dockerfile used to build the image
          push: true  # Push the image to Docker Hub after building it
          tags: docker.io/${{ env.DOCKERHUB_REPO }}:${{ github.sha }}  # Tag the image with the commit SHA, following Docker Hub naming conventions
          cache-from: type=gha  # Enable GitHub Action cache for faster builds
          cache-to: type=gha,mode=max  # Maximize caching for subsequent builds

  # Define the deploy job.
  # deploy:
  #   permissions:
  #     contents: none  # Lock down permissions for this job to the minimum required
  #   runs-on: ubuntu-latest  # Specify that this job also runs on Ubuntu runner
  #   needs: build  # Ensure that the deploy job waits until the build job is complete
  #   environment:
  #     name: 'Development'  # Deploy to the 'Development' environment
  #     url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}  # Store the output URL of the web app

  #   steps:
  #     # Step 5: Deploy the Docker image to Azure Web App.
  #     - name: Deploy to Azure Web App
  #       id: deploy-to-webapp
  #       uses: azure/webapps-deploy@v2  # Use Azure's webapps-deploy GitHub Action to deploy the container
  #       with:
  #         app-name: ${{ env.AZURE_WEBAPP_NAME }}  # Use the Azure Web App name defined in the environment variables
  #         publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}  # Use the publish profile secret to authenticate and deploy
  #         images: 'docker.io/${{ env.DOCKERHUB_REPO }}:${{ github.sha }}'  # Deploy the Docker image built and pushed in the build job
